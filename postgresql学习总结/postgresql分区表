分区表就是根据分区策略，将数据分散到不同的子表中，并通过父表建立关联关系，从而实现数据分布在不同的表上。分区表在不同的文档描述中使用了多个名词，例如“原生分区”、“内置分区表”、“分区表”。

创建分区表方法一：通过继承实现分区表
================步骤如下：================================================================================================================================================
	（1）创建“父表”，所有分区都从父表继承。该表中没有数据，不要在其上定义任何检查约束，除非你希望约束所有的分区。同样，在其上定义索引或者唯一约束也没有意义。
	（2）创建几个“子表”，每个都是从主表上继承的。通常这些表不会增加任何字段。我们将把子表称作分区，实际上他们就是普通的postgresql表。
	（3）给分区表增加约束，定义每个分区允许的键值。
	（4）对于每个分区表，在关键字字段上创建一个索引，也可以创建其它你想创建的索引。严格来说，关键字字段索引并非必须的，但是在大多数情况下它是很有帮助的。如果你希望关键字值是唯一的，那么应该总是给每个分区创建一个唯一约束或者主键约束。
	（5）定义一个规则或者触发器，把对主表的数据插入重定向到合适的分区表中。
	（6）确保constraint_exclusion中的配置参数"postgresql.conf"是打开的。打开后，如果查询中where子句中的过滤条件和分区表中的约束条件相匹配，那么该查询会智能的只查询此分区，而不会查询其它分区。
========================================================================================================================================================================
	
================实例如下：================================================================================================================================================
======创建主表
	CREATE TABLE measurement (
		city_id int not null,
		logdate date not null,
		peaktemp int,
		unitsales int
	);
	
======创建多个子表，并添加约束
	CREATE TABLE measurement_y2006m02 ( CHECK ( logdate >= DATE '2006-02-01' AND logdate < DATE '2006-03-01') ) INHERITS (measurement);
	CREATE TABLE measurement_y2006m03 ( CHECK ( logdate >= DATE '2006-03-01' AND logdate < DATE '2006-04-01' ) ) INHERITS (measurement);
	CREATE TABLE measurement_y2008m04 ( CHECK ( logdate >= DATE '2008-04-01' AND logdate < DATE '2008-05-01' ) ) INHERITS (measurement);
	
======为子表的关键列创建索引
	CREATE INDEX measurement_y2006m02_logdate ON measurement_y2006m02 (logdate);
	CREATE INDEX measurement_y2006m03_logdate ON measurement_y2006m03 (logdate);
	CREATE INDEX measurement_y2006m04_logdate ON measurement_y2006m04 (logdate);
	
======创建函数以及调用函数的触发器
	CREATE OR REPLACE FUNCTION measurement_insert_trigger()
		RETURNS TRIGGER AS $$
		BEGIN
 			IF ( NEW.logdate >= DATE '2006-03-01' AND NEW.logdate < DATE '2006-04-01' ) THEN
         		INSERT INTO measurement_y2006m03 VALUES (NEW.*);
     		ELSIF ( NEW.logdate >= DATE '2008-02-01' AND NEW.logdate < DATE '2008-03-01' ) THEN
        		INSERT INTO measurement_y2008m02 VALUES (NEW.*);
    		ELSE
        		RAISE EXCEPTION 'Date out of range.  Fix the measurement_insert_trigger() function!';
    		END IF;
     		RETURN NULL;
		END;
 	$$
	LANGUAGE plpgsql;

	CREATE TRIGGER insert_measurement_trigger BEFORE INSERT ON measurement FOR EACH ROW EXECUTE PROCEDURE measurement_insert_trigger();

触发器和函数的作用主要是在插入数据的过程中，把数据定位到正确的子表中。同理可以使用规则来替代触发器函数
======创建规则
	CREATE RULE measurement_insert_y2006m03 AS ON INSERT TO measurement WHERE ( logdate >= DATE '2006-03-01' AND logdate < DATE '2006-04-01' ) 
		DO INSTEAD INSERT INTO measurement_y2006m03 VALUES (NEW.*);

 	CREATE RULE measurement_insert_y2008m02 AS ON INSERT TO measurement WHERE ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' )
 		DO INSTEAD INSERT INTO measurement_y2008m02 VALUES (NEW.*);


======插入数据
	insert into measurement values(1,date '2006-03-03',1,1);
	insert into measurement values(1,date '2008-02-03',1,1);
==========================================================================================================================================================================






创建分区表方法二：通过内置声明创建分区表
================步骤如下：================================================================================================================================================
	（1）创建父表：指定分区键字段、分区策略（RANGE | LIST | HASH）；。
	（2）创建分区：指定父表、分区键范围（分区键范围重叠之后会直接报错）或DEFAULT；。
	（3）创建索引：通常，分区键字段上的索引是必须的。
	（4）确保 postgresql.conf 中的enable_partition_pruning 启用，否则，查询将不会被优化。
========================================================================================================================================================================
	
================使用RANGE策略，实例如下：=========================================================================================================================================================================
======创建主表
	CREATE TABLE measurement (
		city_id int not null,
		logdate date not null,
		peaktemp int,
		unitsales int
	) PARTITION BY RANGE (logdate);
	
======创建分区
	CREATE TABLE measurement_y2007m11 PARTITION OF measurement  FOR VALUES FROM ('2007-11-01') TO ('2007-12-01');
	CREATE TABLE measurement_y2007m12 PARTITION OF measurement  FOR VALUES FROM ('2007-12-01') TO ('2008-01-01');
	CREATE TABLE measurement_y2008m01 PARTITION OF measurement  FOR VALUES FROM ('2008-01-01') TO ('2008-02-01');
	
======创建索引
	CREATE INDEX ON measurement (logdate);

======插入数据
	insert into measurement values(1,date '2007-11-03',1,1);
	insert into measurement values(1,date '2008-01-03',1,1);
==========================================================================================================================================================================





