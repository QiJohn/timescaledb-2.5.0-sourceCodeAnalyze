数据库的备份方式有很多种，如逻辑备份和物理备份

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
=======================逻辑备份：postgresql提供了pg_dump、pg_dumpall命令进行数据库的逻辑备份
	1、pg_dumpall是将一个postgresql数据库集群全部转存到一个SQL脚本文件中。
	2、pg_dump是将一个数据库或部分表转存到一个SQL脚本文件中，或者转存到一个归档文件中。
		SQL脚本文件说明：该文件是纯文本格式的文件，它包含许多的SQL命令，执行这些SQL命令可以重建该数据库并将之恢复到保存成脚本时的状态。
		归档文件说明：该归档文件可以指定文件格式，但是使用该归档文件进行数据库恢复时，必须使用pg_restore命令
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
		
	
	
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
=======================物理备份：冷备份、热备份
	1、冷备份：把数据库停下来，对数据库实例的存储目录PGDATA进行拷贝
	2、热备份：
		2.1、基于WAL日志的热备份(PITR方法)
				我们知道PostgreSQL在data目录的pg_wal子目录(10版本前是pg_xlog)中始终维护一份WAL日志文件。该日志文件记录了数据库数据文件的每次改变。当数据库异常崩溃以后，能够通过重放(replay)
			最后一次检查点(checkpoint)之后的日志记录，就能把数据库推到最终一致的状态。因此我们如果有了最初的数据库备份Base，再加上此备份时间点后的所有数据库的WAL日志，相当于数据库的改变量Δ，然后
			直接重放Δ就能实现数据库的恢复。
				具体来说就是把一个文件系统级别的全量备份和WAL(预写式日志)级别的增量备份结合起来。当需要恢复时，我们先恢复文件系统级别的备份，然后重放备份的WAL文件，把系统恢复到之前的某个状态。
			虽然直接复制数据库数据文件，由于复制文件的时间有先后，可能会导致数据文件之间存在不一致的情况。但是由于有了WAL日志，即使备份出来的数据块不一致，也可以通过重放来实现最终的一致性。
			连续归档有以下的几个特点：
				(1)不需要完美的一致性的备份，备份中的任何非一致性数据都可以通过重放WAL日志文件得以纠正。
				(2)可以结合一个无穷长的WAL日志序列用于重放，可以通过简单的归档WAL文件来达到连续备份。
				(3)不需要重放WAL日志到最后，可以在任何点停止重放，并使数据库恢复到某个时间点的一致性状态，这就是基于时间点的备份，英文为"Point-In-Time Recovery"简称“PITR”。
				(4)可以连续的将一系列WAL文件输送给另外一台已经载入了相同基础备份文件的机器，得到一个实时的热备份系统。
			把WAL日志传送到另外一台机器的方法有2种，一种是通过WAL归档日志方法；另外一种是PostgreSQL9.X以后开始提供的被称为流复制的方法。
			
		2.2、物理存储快照备份：使用系统文件或者块设备级别的快照功能完成备份，例如使用LVM快照技术进行热备
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
		
		
		

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
=======================基础备份：使用简单的cp命令或其他命令把数据库在线复制出来的备份
	从基础备份操作开始之后产生的WAL日志和基础备份本身就构成了一个完整的备份。我们当然也可以直接cp的方式来备份，但是PosggreSQL提供了pg_basebackup命令行工具来实现更加灵活和安全的方式完成基础备份。
pg_basebackup工具把整个数据库实例的全部数据都物理的复制出来(包括配置文件)，而不是也不能是只把实例种的部分内容单独备份出来例如只备份某些表。该工具使用流复制的协议连接到主数据库上，所以数据库上必须允许replication连接。
	基础备份的方式：
		第一种：通过底层API的方式一步一步地完成。
		第二种：通过pg_basebackup命令工具一键完成。
	
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	
	
	


——————————————————————————————————————————————————————————————————热备份————————————————————————————————————————————————————————————————————————————————————————————————————
=======================WAL归档日志方法：就是把在线的已经写完的WAL日志复制出来【基于cp、scp命令的文件拷贝方式】
	可以通过配置postgresql.conf文件中的archive_mode和archive_command来打开WAL日志归档。其中archive_command就是一个操作系统的命令，该命令把WAL日志文档复制到其他地方，也包括远程的主机。
示例如“ wal_level = archive     archive_mode = on       archive_command = 'cp %p /var/lib/pgsql/backups/pg_wall_archive/%f '  ”，命令中“wal_level”表示设置日志的级别（必须设置
为archive或replica(高版本)）命令中的“archive_mode = on”表示打开归档备份文件，参数“archive_command”的配置是一UNIX的cp命令，命令中的“%p”表示在线WAL日志路径的全路径名(源路径)，“%f”表示
不包括路径的WAL日志文件名。也可以使用操作系统命令scp把WAL日志复制到其它机器上，从而实现跨机器的归档日志备份，例如“ archive_mode = on       archive_command = 'scp %p  
userName@192.168.1.100:/var/lib/pgsql/backups/pg_wall_archive/%f ' ”
	使用上面复制WAL文件的方式来同步主、备数据库之间的数据，会导致备数据库落后主数据库一个WAL日志文件，具体落后多长时间却决于生成一个完整的WAL文件所需要的时间。
	
	
	
	
	
=======================流复制:Primary数据库的WAL日志一产生，就会马上传递到Standby数据库，从而解决【基于tcp流的实时数据传输方式】
	流复制是PostgreSQL 9.0之后才提供的新的传递WAL日志的方法。通过流复制，备库不断的从主库同步相应的数据，并在备库apply每个WAL record，这里的流复制每次传输单位是WAL日志的record。
它的好处是只要主库一产生日志，就会马上传递到备库，同WAL日志文件相比有更低同步延迟。
	同时PostgreSQL9.0之后提供了Hot Standby能力，备库在应用WAL record的同时也能够提供只读服务。
	PostgreSQL的流复制最多支持1主8备、支持级联复制（主->备1，备1->备2）。
	
	PostgreSQL流复制的核心部分由walsender，walreceiver和startup三个进程组成：
		(1)walreceiver启动后通过recovery.conf文件中的primary_conninfo参数信息连向主库，主库通过连接参数replication=true启动walsender进程。
		(2)walreceiver执行identify_system命令，获取主库systemid/timeline/xlogpos等信息，执行TIMELINE_HISTORY命令拉取history文件。
		(3)执行wal_startstreaming开始启动流复制，通过walrcv_receive获取WAL日志，期间也会回应主库发过来的心跳信息（接收位点、flush位点、apply位点），向主库发送feedback信息（最老的事务id），
		避免vacuum删掉备库正在使用的记录。
		(4)执行walrcv_endstreaming结束流复制，等待startup进程更新receiveStart和receiveStartTLI，一旦更新，重新进入2/3/4步骤。
	
	
	WAL流复制支持同步、异步方式：
		(1)同步流复制模式。使用同步方式，则在Primary数据库提交事务时，一定会等到WAL日志传递到Standby数据库才会返回，这样可以做到Standby数据库接收到的WAL日志文件完全与Primary数据库同步，没有一
		点落后，当主备切换时可以做到零数据丢失。
 		(2)异步流复制模式中，主库提交的事务不会等待备库接收WAL日志流并返回确认信息，因此异步流复制模式下主库与备库的数据版本上会存在一定的处理延迟，延迟的时间主要受主库压力、备库主机性能、网络带宽等影响，
		当正常情况下，主备的延迟通常在毫秒级的范围内，当主库宕机，这个延迟就主要受到故障发现与切换时间的影响而拉长，不过虽然如此，这些数据延迟的问题，可以从架构或相关自动化运维手段不断优化设置。


【参考链接】
https://zhmin.github.io/posts/postgresql-physical-replication/	
https://developer.aliyun.com/article/640707 
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	


====================搭建Standby数据库
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	1、使用冷备份方式搭建Standby数据库。
		停止数据库，对数据库进行复制，修改复制后的数据库配置文件，把备库启动在Standby模式下。
		
	2、使用热备份方式搭建Standby数据库 
		第一步：通过在线热备份的方式生成一个基础备份，并把基础备份传到备机上；
		第二步：在备库上修改配置文件，把备库启动在Standby模式下。



示例：搭建基于流复制的异步备份
第一步：分别再两台机器上安装PG数据库；假设主库机器为203、备库机器为201；
第二步：在203机器上启动主库，并新建流复制使用的数据库用户及密码，使用命令“create role replica with replication login password '123456'; alter user replica with password '123456'; ”
	修改pg_hdb.conf，添加“host  replication  replica  0.0.0.0/0 md5”，修改postgresql.conf文件配置参数，并重加载数据库；
		
第三步：在201机器上使用pg_basebackup对主库进行备份(连接时使用的用户名、密码等为已经在主库设置好的)，并指定备份好的数据库所在的路径，切换到该路径下，修改该备份库的配置
	文件postgresql.conf。
第四步：在201机器上启动使用pg_basebackup备份好的数据库。
第五步：在机器203上使用默认用户postgres连接数据库，查看同步备份连接信息。


【参考链接】
https://www.cnblogs.com/kuang17/p/12228349.html

———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————




