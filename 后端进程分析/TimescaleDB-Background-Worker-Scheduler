-----------主要用于分析TimescaleDB的“TimescaleDB Background Worker Scheduler”进程-------------------
---涉及的表有_timescaledb_internal.bgw_job_stat、_timescaledb_config_bgw_job。
---当使用add_job向timescaleDB注册job后，scheduler进程中“ts_bgw_db_scheduler_entrypoint”才会被触发执行


/*
 * Register a background worker that calls the main TimescaleDB background
 * worker launcher library (i.e. loader) and uses the scheduler entrypoint
 * function.  The scheduler entrypoint will deal with starting a new worker,
 * and waiting on any txns that it needs to, if we pass along a vxid in the
 * bgw_extra field of the BgWorker.
 */
 /*注册一个后台工作程序，该程序调用主TimescaleDB后台工作启动程序(例如loader)，并使用调度入口函数。
 *如果我们在BgWorker的bgw_extra字段传递一个vxid，该调度入口函数将启动一个新的工作程序，并等待它需要的任何txns*/
static bool
register_entrypoint_for_db(Oid db_id, VirtualTransactionId vxid, BackgroundWorkerHandle **handle)
{
	BackgroundWorker worker;

	memset(&worker, 0, sizeof(worker));
	snprintf(worker.bgw_name, BGW_MAXLEN, "TimescaleDB Background Worker Scheduler");
	worker.bgw_flags = BGWORKER_SHMEM_ACCESS | BGWORKER_BACKEND_DATABASE_CONNECTION;
	worker.bgw_restart_time = BGW_NEVER_RESTART;
	worker.bgw_start_time = BgWorkerStart_RecoveryFinished;
	snprintf(worker.bgw_library_name, BGW_MAXLEN, EXTENSION_NAME);
	snprintf(worker.bgw_function_name, BGW_MAXLEN, BGW_ENTRYPOINT_FUNCNAME);    //绑定的函数名为：ts_bgw_db_scheduler_entrypoint
	worker.bgw_notify_pid = MyProcPid;
	worker.bgw_main_arg = ObjectIdGetDatum(db_id);
	memcpy(worker.bgw_extra, &vxid, sizeof(VirtualTransactionId));

	return RegisterDynamicBackgroundWorker(&worker, handle);    //调用PG的函数，注册动态后台工作程序
}






/*
 * This can be run either from the cluster launcher at db_startup time, or
 * in the case of an install/uninstall/update of the extension, in the
 * first case, we have no vxid that we're waiting on. In the second case,
 * we do, because we have to wait so that we see the effects of said txn.
 * So we wait for it to finish, then we  morph into the new db_scheduler
 * worker using whatever version is now installed (or exit gracefully if
 * no version is now installed).
 */
 /*这能以以下两种方式启动：1、在db_startup时从集群启动器运行；2、install/uninstall/update插件时运行。在第一种情况下，我们没有等待的vxid；在第二种情况下，需要
 * 我们这样做，因为我们必须等待才能看到上述交易的影响。 所以我们等待它完成，然后我们使用现在安装的任何版本转变为新的 db_scheduler worker（如果现在没有安装版本，则优雅地退出）。*/
extern Datum
ts_bgw_db_scheduler_entrypoint(PG_FUNCTION_ARGS)
{
	Oid db_id = DatumGetObjectId(MyBgworkerEntry->bgw_main_arg);
	bool ts_installed = false;
	char version[MAX_VERSION_LEN];
	VirtualTransactionId vxid;

	pqsignal(SIGINT, StatementCancelHandler);
	pqsignal(SIGTERM, entrypoint_sigterm);
	BackgroundWorkerUnblockSignals();
	BackgroundWorkerInitializeConnectionByOid(db_id, InvalidOid, 0);
	pgstat_report_appname(MyBgworkerEntry->bgw_name);

	/*
	 * Wait until whatever vxid that potentially called us finishes before we
	 * happens in a txn so it's cleaned up correctly if we get a sigkill in
	 * the meantime, but we will need stop after and take a new txn so we can
	 * see the correct state after its effects
	 */
	StartTransactionCommand();
	(void) GetTransactionSnapshot();
	memcpy(&vxid, MyBgworkerEntry->bgw_extra, sizeof(VirtualTransactionId));
	if (VirtualTransactionIdIsValid(vxid))
		VirtualXactLock(vxid, true);
	CommitTransactionCommand();

	/*
	 * now we can start our transaction and get the version currently
	 * installed
	 */
	StartTransactionCommand();
	(void) GetTransactionSnapshot();

	/*
	 * Check whether a database is a template database and raise an error if
	 * so, as we don't want to run in template dbs.
	 */
	database_is_template_check();
	/*  Process any config changes caused by an ALTER DATABASE */
	process_settings(MyDatabaseId);
	ts_installed = ts_loader_extension_exists();
	if (ts_installed)
		strlcpy(version, ts_loader_extension_version(), MAX_VERSION_LEN);

	ts_loader_extension_check();
	CommitTransactionCommand();
	if (ts_installed)
	{
		char soname[MAX_SO_NAME_LEN];
		PGFunction versioned_scheduler_main;

		snprintf(soname, MAX_SO_NAME_LEN, "%s-%s", EXTENSION_SO, version);
		versioned_scheduler_main =
			load_external_function(soname, BGW_DB_SCHEDULER_FUNCNAME, false, NULL);   //调用PG的函数，加载外部函数“ts_bgw_scheduler_main”
		if (versioned_scheduler_main == NULL)
			ereport(LOG,
					(errmsg("TimescaleDB version %s does not have a background worker, exiting",
							soname)));
		else /* essentially we morph into the versioned
			  * worker here */
			DirectFunctionCall1(versioned_scheduler_main, ObjectIdGetDatum(InvalidOid));    //函数调用
	}
	PG_RETURN_VOID();
}






Datum
ts_bgw_scheduler_main(PG_FUNCTION_ARGS)
{
	BackgroundWorkerBlockSignals();
	/* Setup any signal handlers here */
	ts_bgw_scheduler_register_signal_handlers();
	BackgroundWorkerUnblockSignals();

	ts_bgw_scheduler_setup_callbacks();

	pgstat_report_appname(SCHEDULER_APPNAME);

	ts_bgw_scheduler_setup_mctx();

	ts_bgw_scheduler_process(-1, NULL);   //Scheduler进程的核心处理函数

	Assert(scheduled_jobs == NIL);
	MemoryContextSwitchTo(TopMemoryContext);
	MemoryContextDelete(scheduler_mctx);

	PG_RETURN_VOID();
};







/* This is the guts of the scheduler which runs the main loop.
 * The parameter ttl_ms gives a maximum time to run the loop (after which
 * the loop will exit). This functionality is used to ease testing.
 * In production, ttl_ms should be < 0 to signal that the loop should
 * run forever (or until the process gets a signal).
 *
 * The scheduler uses 2 memory contexts for its operation: scheduler_mctx
 * for long-lived objects and scratch_mctx for short-lived objects.
 * After every iteration of the scheduling main loop scratch_mctx gets
 * reset. Special care needs to be taken in regards to memory contexts
 * since StartTransactionCommand creates and switches to a transaction
 * memory context which gets deleted on CommitTransactionCommand which
 * switches CurrentMemoryContext back to TopMemoryContext. So operations
 * wrapped in Start/CommitTransactionCommit will not happen in scratch_mctx
 * but will get freed on CommitTransactionCommand.
 */
 /* 这是运行主循环的调度程序的核心。
  * 参数 ttl_ms 给出了运行循环的最长时间（之后循环将退出）。 此功能用于简化测试。
  在生产中， ttl_ms 应该 < 0 表示循环应该永远运行（或直到进程收到信号）。
  *
  * 调度器使用 2 个内存上下文进行操作：scheduler_mctx 用于长寿命对象，scratch_mctx 用于短寿命对象。
  在调度主循环的每次迭代之后，scratch_mctx 被重置。 需要特别注意内存上下文，因为 StartTransactionCommand 创建并切换到事务内存上下文，该事务内存上下文在 CommitTransactionCommand 上被删除，CommitTransactionCommand 将 CurrentMemoryContext 切换回 TopMemoryContext。 因此，包含在 Start/CommitTransactionCommit 中的操作不会发生在 scratch_mctx 中，但会在 CommitTransactionCommand 上释放。
  */
void
ts_bgw_scheduler_process(int32 run_for_interval_ms,
						 register_background_worker_callback_type bgw_register)
{
	TimestampTz start = ts_timer_get_current_timestamp();
	TimestampTz quit_time = DT_NOEND;

	pgstat_report_activity(STATE_RUNNING, NULL);

	/* txn to read the list of jobs from the DB */
	StartTransactionCommand();
	scheduled_jobs = ts_update_scheduled_jobs_list(scheduled_jobs, scheduler_mctx);
	CommitTransactionCommand();
	MemoryContextSwitchTo(scratch_mctx);

	jobs_list_needs_update = false;

	if (run_for_interval_ms > 0)
		quit_time = TimestampTzPlusMilliseconds(start, run_for_interval_ms);

	ereport(DEBUG1, (errmsg("database scheduler starting for database %u", MyDatabaseId)));

	/*
	 * on SIGTERM the process will usually die from the CHECK_FOR_INTERRUPTS
	 * in the die() called from the sigterm handler. Child reaping is then
	 * handled in the before_shmem_exit,
	 * bgw_scheduler_before_shmem_exit_callback.
	 */
	while (quit_time > ts_timer_get_current_timestamp() && !ProcDiePending && !ts_shutdown_bgw)
	{
		TimestampTz next_wakeup = quit_time;
		Assert(CurrentMemoryContext == scratch_mctx);

		/* start jobs, and then check when to next wake up */
		start_scheduled_jobs(bgw_register);
		next_wakeup = least_timestamp(next_wakeup, earliest_wakeup_to_start_next_job());
		next_wakeup = least_timestamp(next_wakeup, earliest_job_timeout());

		pgstat_report_activity(STATE_IDLE, NULL);
		ts_timer_wait(next_wakeup);
		pgstat_report_activity(STATE_RUNNING, NULL);

		CHECK_FOR_INTERRUPTS();

		if (got_SIGHUP)
		{
			got_SIGHUP = false;
			ProcessConfigFile(PGC_SIGHUP);
		}

		/*
		 * Process any cache invalidation message that indicates we need to
		 * update the jobs list
		 */
		AcceptInvalidationMessages();

		if (jobs_list_needs_update)
		{
			StartTransactionCommand();
			Assert(CurrentMemoryContext == CurTransactionContext);
			scheduled_jobs = ts_update_scheduled_jobs_list(scheduled_jobs, scheduler_mctx);
			CommitTransactionCommand();
			MemoryContextSwitchTo(scratch_mctx);
			jobs_list_needs_update = false;
		}

		check_for_stopped_and_timed_out_jobs();

		MemoryContextReset(scratch_mctx);
	}

#ifdef TS_DEBUG
	if (ts_shutdown_bgw)
		elog(WARNING, "bgw scheduler stopped due to shutdown_bgw guc");
#endif

	CHECK_FOR_INTERRUPTS();

	wait_for_all_jobs_to_shutdown();
	check_for_stopped_and_timed_out_jobs();
}



